
name: Auto milestone from labels
on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened]
  pull_request:
    types: [opened, edited, labeled, unlabeled, reopened, ready_for_review]
  workflow_dispatch:
permissions:
  issues: write
  pull-requests: write
jobs:
  apply:
    runs-on: ubuntu-latest
    steps:
      - name: Map labels → milestone
        uses: actions/github-script@v7
        with:
          script: |
            const isPR = !!context.payload.pull_request;
            const item = context.payload.issue || context.payload.pull_request;
            const labels = (item.labels || []).map(l => typeof l === 'string' ? l : l.name);
            const mapping = {
              'milestone/phase-0': 'Phase 0 – Baseline',
              'milestone/phase-1': 'Phase 1 – Corpus & Standards',
              'milestone/phase-2': 'Phase 2 – Comparison Engine',
              'milestone/phase-3': 'Phase 3 – Annotations & Issues',
              'milestone/phase-4': 'Phase 4 – Guidance UI',
            };
            const key = labels.find(n => (n||'').toLowerCase().startsWith('milestone/'));
            if (!key) { core.info('no milestone/* label'); return; }
            const wanted = mapping[key];
            if (!wanted) { core.info('label not mapped: ' + key); return; }
            const owner = context.repo.owner; const repo = context.repo.repo;
            const {data: milestones} = await github.rest.issues.listMilestones({owner, repo, state: 'open'});
            let m = milestones.find(x => x.title === wanted);
            if (!m) {
              // Fallback: check closed too
              const {data: all} = await github.rest.issues.listMilestones({owner, repo, state: 'all'});
              m = all.find(x => x.title === wanted);
            }
            if (!m) { core.warning('milestone not found: ' + wanted); return; }
            await github.rest.issues.update({owner, repo, issue_number: item.number, milestone: m.number});
            core.info(`set milestone '${wanted}' on #${item.number}`);
