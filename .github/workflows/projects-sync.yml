
name: Projects sync (add & fields)
on:
  issues:
    types: [opened, edited, labeled, unlabeled, reopened]
  pull_request:
    types: [opened, edited, labeled, unlabeled, reopened, ready_for_review]
  workflow_dispatch:
jobs:
  add-and-map:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/users/g0udurix/projects/3
          github-token: ${{ secrets.PROJECTS_PAT }}
      - name: Map labels to fields (Status, Priority)
        uses: actions/github-script@v7
        env:
          PROJECTS_PAT: ${{ secrets.PROJECTS_PAT }}
        with:
          script: |
            const token = process.env.PROJECTS_PAT;
            if (!token) { core.warning('PROJECTS_PAT not set; skip'); return; }
            const isPR = !!context.payload.pull_request;
            const item = context.payload.issue || context.payload.pull_request;
            const labels = (item.labels || []).map(l => typeof l === 'string' ? l : l.name);
            const priorityLabel = (labels.find(l => /^priority\//i.test(l))||'').split('/')?.[1] || null;
            const statusLabel   = (labels.find(l => /^status\//i.test(l))||'').split('/')?.[1] || null;
            const { graphql } = require('@octokit/graphql');
            const ghgql = graphql.defaults({ headers: { authorization: `token ${token}` }});
            const login = context.repo.owner; const number = 3;
            const proj = await ghgql(`query($login:String!,$number:Int!){ user(login:$login){ projectV2(number:$number){ id fields(first:50){ nodes{ id name __typename ... on ProjectV2SingleSelectField { options{ id name } } } } } } }`, {login, number});
            const project = proj.user?.projectV2; if(!project){ core.warning('project not found'); return; }
            const fields = project.fields.nodes;
            const F = (name)=>fields.find(f=>f.name===name);
            const O = (field,val)=> field && field.options && field.options.find(o=>o.name.toLowerCase()===(val||'').toLowerCase());
            const statusField = F('Status');
            const priorityField = F('Priority');
            const statusOpt = O(statusField, statusLabel);
            const priorityOpt = O(priorityField, priorityLabel);
            const contentNodeId = (isPR
              ? (await github.rest.pulls.get({owner: context.repo.owner, repo: context.repo.repo, pull_number: item.number})).data.node_id
              : (await github.rest.issues.get({owner: context.repo.owner, repo: context.repo.repo, issue_number: item.number})).data.node_id);
            const addRes = await ghgql(`mutation($projectId:ID!,$contentId:ID!){ addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}){ item{ id } } }`, {projectId: project.id, contentId: contentNodeId}).catch(()=>({}));
            const itemId = addRes?.addProjectV2ItemById?.item?.id; if(!itemId){ core.info('item exists or added via add-to-project'); }
            async function setSelect(field,opt){ if(!field||!opt)return; await ghgql(`mutation($p:ID!,$i:ID!,$f:ID!,$o:String!){ updateProjectV2ItemFieldValue(input:{projectId:$p,itemId:$i,fieldId:$f,value:{singleSelectOptionId:$o}}){ clientMutationId } }`, {p: project.id, i: itemId, f: field.id, o: opt.id}); }
            await setSelect(statusField, statusOpt);
            await setSelect(priorityField, priorityOpt);
            core.info('mapped fields');
